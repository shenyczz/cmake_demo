【CMAKE 常用变量及环境变量】
 本文介绍了一些较常用的 cmake 变量，这些变量仅仅是所有 cmake 变量的很少一部分，如果需要了解更多的 cmake 变量，
 更好的方式是阅读一些成功项目的 cmake 工程文件，比如 KDE4 的代码。

【1】变量引用
 使用 ${} 进行变量的引用。在 IF 等语句中，是直接使用变量名而不通过 ${} 取值。

【2】自定义变量的方式
 主要有隐式定义和显式定义两种：
 举一个隐式定义的例子，就是 PROJECT 指令，他会隐式的定义<projectname>_BINARY_DIR 和<projectname>_SOURCE_DIR 两个变量。
 而显式定义的例子，可以使用 SET 指令，就可以构建一个自定义变量了。

【3】常用变量
 3.1 PROJECT_BINARY_DIR
 如果是 in source 编译，这个变量指得就是工程顶层目录，
 如果是 out-of-source 编译，指的是工程编译发生的目录。
 另外 <projectname>_BINARY_DIR 和 CMAKE_BINARY_DIR 跟这个变量指代的内容是一致的。
 
 3.2 PROJECT_SOURCE_DIR
 不论采用何种编译方式，都是工程顶层目录。
 也就是在 in source 编译时，他跟 PROJECT_BINARY_DIR 等变量一致。
 另外 <projectname>_SOURCE_DIR 和 CMAKE_SOURCE_DIR 跟这个变量指代的内容是一致的。
 
 3.3 CMAKE_CURRENT_SOURCE_DIR
 指的是当前处理的 CMakeLists.txt 所在的路径。
 
 3.4 CMAKE_CURRRENT_BINARY_DIR
 如果是 in-source 编译，它跟 CMAKE_CURRENT_SOURCE_DIR 一致，
 如果是 out-ofsource 编译，他指的是 target 编译目录。
 使用 ADD_SUBDIRECTORY(src bin) 可以更改这个变量的值。
 
 3.5 CMAKE_CURRENT_LIST_FILE
 输出调用这个变量的 CMakeLists.txt 的完整路径。
 
 3.6 CMAKE_CURRENT_LIST_LINE
 输出这个变量所在的行。
 
 3.7 CMAKE_MODULE_PATH
 这个变量用来定义自己的 cmake 模块所在的路径。
 如果你的工程比较复杂，有可能会自己编写一些 cmake 模块，这些 cmake 模块是随你的工程发布的，
 为了让 cmake 在处理CMakeLists.txt 时找到这些模块，你需要通过 SET 指令，将自己的 cmake 模块路径设置一下。
 比如 SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake) 这时候你就可以通过 INCLUDE 指令来调用自己的模块了。
 
 3.8 EXECUTABLE_OUTPUT_PATH
 用来重新定义目标二进制可执行文件的存放位置。
 
 3.9 LIBRARY_OUTPUT_PATH
 用来重新定义目标链接库文件的存放位置。
 
 3.10 PROJECT_NAME
 返回通过 PROJECT 指令定义的项目名称。

【4】系统信息
 4.1 CMAKE_MAJOR_VERSION，CMAKE 主版本号，比如 2.4.6 中的 2
 4.2 CMAKE_MINOR_VERSION，CMAKE 次版本号，比如 2.4.6 中的 4
 4.3 CMAKE_PATCH_VERSION，CMAKE 补丁等级，比如 2.4.6 中的 6
 4.4 CMAKE_SYSTEM，系统名称，比如 Linux-2.6.22
 4.5 CMAKE_SYSTEM_NAME，不包含版本的系统名，比如 Linux
 4.6 CMAKE_SYSTEM_VERSION，系统版本，比如 2.6.22

【5】开关选项
 5.1 CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS
 用来控制 IF ELSE 语句的书写方式。

 5.2 BUILD_SHARED_LIBS
 这个开关用来控制默认的库编译方式，如果不进行设置，使用 ADD_LIBRARY 并没有指定库类型的情况下，默认编译生成的库都是静态库。
 如果 SET(BUILD_SHARED_LIBS ON)后，默认生成的为动态库。

 5.3 CMAKE_C_FLAGS
 设置 C 编译选项，也可以通过指令 ADD_DEFINITIONS()添加。

 5.4 CMAKE_CXX_FLAGS
 设置 C++编译选项，也可以通过指令 ADD_DEFINITIONS()添加。

【6】调用环境变量的方式
 使用 $ENV{NAME} 指令就可以调用系统的环境变量了。比如
 MESSAGE(STATUS “HOME dir: $ENV{HOME}”)
 设置环境变量的方式是：
 SET(ENV{变量名} 值)


【参考】
 https://www.cnblogs.com/linuxAndMcu/p/10670591.html
